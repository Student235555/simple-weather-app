{"version":3,"sources":["Components/Form.js","Components/Result.js","Components/App.js","reportWebVitals.js","index.js"],"names":["Form","name","change","submit","onSubmit","placeholder","value","onChange","event","target","type","className","Result","weather","content","length","sunriseTime","Date","toLocaleTimeString","sunsetTime","App","useState","setValue","date","setDate","city","setCity","sunrise","setSunrise","sunset","setSunset","temp","setTemp","wind","setWind","pressure","setPressure","err","setErr","e","preventDefault","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","sys","main","speed","catch","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15c2bd0f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Form.css';\r\n\r\nconst Form = ({name, change, submit}) => {\r\n    \r\n    return ( \r\n        <form onSubmit={submit}>\r\n            <input \r\n                placeholder=\"Podaj nazwę miasta...\" \r\n                value={name} \r\n                onChange={event => change(event.target.value)} \r\n                type=\"text\">\r\n            </input>\r\n\r\n            <button className='searchBtn'>Wyszukaj miasta</button>\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default Form;","import React from \"react\";\r\nimport './Result.css';\r\n\r\nconst Result = ({weather}) => {\r\n\r\n    let content = null;\r\n\r\n    if(weather[0].length < 1)\r\n\r\n    return ( \r\n        <div className='result'>\r\n            {<h3>Proszę podać nazwę miasta.</h3>}\r\n        </div>\r\n    );\r\n\r\n    else if(!weather[7] && weather[0]){\r\n\r\n        const sunriseTime = new Date(weather[3]*1000).toLocaleTimeString();\r\n        const sunsetTime = new Date(weather[4]*1000).toLocaleTimeString();\r\n\r\n        content = (\r\n            <>\r\n                <h3>Wyniki wyszukiwania dla: <em>{weather[0]}</em></h3>\r\n                <h4>Dane dla dnia i godziny: {weather[1]}</h4>\r\n                <h4>Temperatura: {weather[2]} &#176;C</h4>\r\n                <h4>Wschód słońca: {sunriseTime}</h4>\r\n                <h4>Zachód słońca: {sunsetTime}</h4>\r\n                <h4>Ciśnienie: {weather[5]} hPa</h4>\r\n                <h4>Siła wiatru: {weather[6]} m/s</h4>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return ( \r\n      <div className='result'>\r\n          {weather[7] ? <h3>Nie ma w bazie miasta: <em>{weather[0]}</em></h3>: content}\r\n      </div>\r\n     );\r\n}\r\n \r\nexport default Result;","import React, {useState} from \"react\";\nimport './App.css';\nimport Form from \"./Form\";\nimport Result from \"./Result\";\n\nconst APIkey = '1146d14d2af48b91a826d85e26a4117e';\n\nconst App = () => {\n\n  const [value, setValue] = useState('');\n  const [date, setDate] = useState('');\n  const [city, setCity] = useState('');\n  const [sunrise, setSunrise] = useState('');\n  const [sunset, setSunset] = useState('');\n  const [temp, setTemp] = useState('');\n  const [wind, setWind] = useState('');\n  const [pressure, setPressure] = useState('');\n  const [err, setErr] = useState(false);\n\n  const weather = [city, date, temp, sunrise, sunset, pressure, wind, err];\n\n  const handleClick = (e) => {\n    \n    e.preventDefault();\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${value}&appid=${APIkey}&units=metric`;\n\n    fetch(API)\n      .then(response => {\n        if(response.ok)\n        {\n          return response\n        }\n        throw Error(\"Nie udało się.\")\n      })\n      .then(response => response.json())\n      .then(data => {\n        const time = new Date().toLocaleString();\n        setErr(false);\n        setDate(time);\n        setSunrise(data.sys.sunrise);\n        setSunset(data.sys.sunset);\n        setTemp(data.main.temp)\n        setWind(data.wind.speed);\n        setPressure(data.main.pressure);\n        setCity(value);\n      })\n      .catch(err => { \n        console.log(err);\n        setErr(true);\n        setCity(value);\n      })\n  }\n\n  return(\n    <div className='App'>\n      <Form \n        name={value} \n        change={setValue}\n        submit={handleClick}\n      />\n      <Result weather = {weather}/>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}